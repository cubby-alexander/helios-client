name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Get short commit hash
        id: vars
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Debug Secrets
        run: |
          echo "DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}"
          echo "DOCKER_APP_NAME: ${{ secrets.DOCKER_APP_NAME }}"
          echo "COMMIT_HASH: ${{ env.COMMIT_HASH }}"

      - name: Build and push Docker image
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MECE_ORG_OPS_ID: ${{ secrets.OPENAI_MECE_ORG_OPS_ID }}
          OPENAI_MECE_OPS_ACTIVITY_ID: ${{ secrets.OPENAI_MECE_OPS_ACTIVITY_ID }}
          OPENAI_RSS_FILTERING_ID: ${{ secrets.OPENAI_RSS_FILTERING_ID }}
          OPENAI_APP_QUESTIONS_ID: ${{ secrets.OPENAI_APP_QUESTIONS_ID }}
          OPENAI_SAT_APP_ID: ${{ secrets.OPENAI_SAT_APP_ID }}
        run: |
          docker build --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}  --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg OPENAI_MECE_ORG_OPS_ID=${{ secrets.OPENAI_MECE_ORG_OPS_ID }} \
            --build-arg OPENAI_MECE_OPS_ACTIVITY_ID=${{ secrets.OPENAI_MECE_OPS_ACTIVITY_ID }} \
            --build-arg OPENAI_RSS_FILTERING_ID=${{ secrets.OPENAI_RSS_FILTERING_ID }} \
            --build-arg OPENAI_APP_QUESTIONS_ID=${{ secrets.OPENAI_APP_QUESTIONS_ID }} \
            --build-arg OPENAI_SAT_APP_ID=${{ secrets.OPENAI_SAT_APP_ID }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_APP_NAME }}:latest -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_APP_NAME }}:${{ env.COMMIT_HASH }} .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_APP_NAME }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_APP_NAME }}:${{ env.COMMIT_HASH }}

  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to DigitalOcean
        env:
          DO_SSH_PRIVATE_KEY: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          DO_SERVER_IP: ${{ secrets.DO_SERVER_IP }}
          DO_USER: ${{ secrets.DO_USER }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_APP_NAME: ${{ secrets.DOCKER_APP_NAME }}

        run: |
          echo "$DO_SSH_PRIVATE_KEY" | tr -d '\r' > private_key
          chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml nginx.conf $DO_USER@$DO_SERVER_IP:/home/$DO_USER/deployment
          ssh -i private_key -o StrictHostKeyChecking=no -t $DO_USER@$DO_SERVER_IP << EOF
            cd /home/$DO_USER/deployment
            
            # Export environment variables
            export DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            export DOCKER_APP_NAME=${{ secrets.DOCKER_APP_NAME }}
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Stop existing containers if they exist
            docker-compose down || true
            
            # Clean up containers and volumes only if they exist
            if [ "\$(docker ps -a -q)" ]; then
              docker rm -f \$(docker ps -a -q)
            fi
            
            if [ "\$(docker volume ls -q)" ]; then
              docker volume rm \$(docker volume ls -q) || true
            fi
            
            # Pull latest images and start
            docker-compose pull
            docker-compose up -d
          EOF
